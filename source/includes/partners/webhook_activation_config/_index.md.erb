# Webhook activation config
## About activation config

```json
{
   "config":{
      "fields":[
         {
            "type":"infobox",
            "content":"<a href='https://example-partner.com/support-article'>Click</a> here to learn how to use this integration",
            "icon":"info"
         },
         {
            "id":"clientId",
            "type":"text",
            "label":"Client ID",
            "required":true,
            "description":"Please insert the Client ID"
         },
         {
            "id":"clientSecret",
            "type":"password",
            "label":"Client SECRET",
            "required":true,
            "description":"Please insert the Client secret"
         },
         {
            "id":"language",
            "type":"select",
            "label":"Test Default language",
            "description":"Select the default test language",
            "options":[
               {
                  "id":"1",
                  "label":"English"
               },
               {
                  "id":"2",
                  "label":"French"
               }
            ]
         }
      ]
   },
   "validateEndpoint": "activation/validate"
}
```
### This config is visible during trigger activation in settings page.
This is the place where you should explain to the user how your trigger works for example by using infobox type with link to the support article and also
collect the data you need in order to identify user.
You can render a form that will need to be filled to enable integration. It could be email, passwords, api tokens.
Forms can include some other settings, or for example link 
<%= image_tag('activation.png') %>


## Example implementation of middleware

```js
module.exports = async (req, res, next) => {
  const [JWTtoken] = req.headers.authorization.split('Bearer ');

  try {
    const decoded = JWT.verify(JWTtoken, TT_PARTNER_API_KEY);
    req.auth = decoded;
    return next();
  } catch (error) {
    if (req.path.includes('config')) {
      return res.json({
        config: {
          fields: [
            {
              type: 'error',
              message: 'Wrong authorization token',
            },
          ],
        },
      });
    }
    return next(error);
  }
};

```

After user will finish the installation Teamtailor will turn this form into a JSON web token
The token will be included in any request to `GET ${BASE_URL}/config`
 and `POST ${BASE_URL/webhook}`
Payload can be verified with TT_PARTNER_API_KEY



## Setting up activation config
Create an activation config using the same elements as in the webhook config.
You have several options on how to implement activation config:

1. Setting static config on a Partner using API with at least one input field (recommended)
1. Implementing dynamic config that will call your endpoint every time user will go to your integration in the settings page

## Set the static activation config on Partner

```http
PUT https://api.teamtailor.com/partner/v1/partners/99 HTTP/1.1
Authorization: Token abc123abc123
X-Api-Version: <%= config[:api_version] %>
Content-Type: application/vnd.api+json

{
  "data": {
    "id": 99,
    "type":"partners",
    "attributes":{
      "webhook-activation-config": {
        "config": {
          "fields": [
            {
              "type":"infobox",
              "content":"<a href='https://example-partner.com/support-article'>Click</a> here to learn how to use this integration",
              "icon":"info"
            },
            {
              "id":"token",
              "type":"text",
              "label":"Example Token",
              "required":true
            },
          ]
        }
      }
    }
  }
}
```
Set the static config on partner resource. The fields values filled by the user will be 
turned into JSONWebToken. You can mark options required



## Empty fields
Setting empty fields will result in rendering the default activation window with
autogenerated UUID, which will not be turned into JsonWebToken. This is the option for the integrations
that do not need any information included in the setting.

```json
  {
    "config": {
      "fields": []
    }
  }
```
<%= image_tag('default_activation.png') %>



## Default key field
If you happen to need an uuid generated by an activation you can include the field with
id: default_key




```json
{
  "id":"default_key",
  "type":"text",
  "label": "Default Key",
  "description": "This is the integration key, please copy it and send it to Examplepartner before using the trigger"
}
```
<%= image_tag('default_key.png') %>

## Dynamic config

Sometimes you may need to dynamically render the content of the fields
You can achieve that with setting the empty object in webhook-activation-config.
Each time the user will go to settings/your integration we will call

`GET ${BASE_URL}/activation?company_uuid=xyz` 

and try to render returned config fields


```http
PUT https://api.teamtailor.com/partner/v1/partners/99 HTTP/1.1
Authorization: Token abc123abc123
X-Api-Version: <%= config[:api_version] %>
Content-Type: application/vnd.api+json

{
  "data": {
    "id": 99,
    "type":"partners",
    "attributes":{
      "webhook-activation-config": {}
    }
  }
}
```

## Validation endpoint

If you would like to validate the activation of your user, you are able to include in your webhook activation config

```json
{
   "config":{
      "fields":[
      
         {
            "id":"api_key",
            "type":"text",
            "label":"Enter your api key"  
         }
      ], 
      "validateEndpoint": "my-validation/validate"
   }
}
```

We will make the following request:

`GET ${BASE_URL}/my-validation/validate` 
You can validate Authorization header and make a response

You can response with 200, in this case user will see that validation was successful
If you will render error http status (>=400) we will render your response

The error response should be in format of an object with property 'errors' and array of strings as a value
```json
  {errors: ["String1", "String2"]}
```