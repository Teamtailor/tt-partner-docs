# Webhook config

To allow users to pick options for the webhook, that will be included in the webhook sent to you, we will fetch this endpoint each time a new trigger is set up and create a HTML form from the fields.

This could be, for example, a select tag with tests the client can send to candidates.

The JSON to the right is an example of the expected response.

If the config is requested from a "trigger" on a job, we will include the job and stage id's as parameters, which can be used as context for the form.

Note, if you use the same config with the same set of fields for all clients, you can save a static config on the [Partner resource](#partners).
In that case we won't fetch this endpoint to get the config.

```http
GET ${BASE_URL}/config?job_id=123&stage_id=456 HTTP/1.1
Authorization: Bearer xxx-provider-key
```

> Expected response

```json
{
  "config": {
    "fields": [
      {
        "id": "type",
        "label": "Test",
        "placeholder": "Select test",
        "type": "select",
        "optgroups": [
          {
            "label": "Logical tests",
            "options": [
              { "id": 1, "label": "Algorithm test" },
              { "id": 2, "label": "Data structure test" },
            ]
          },
          {
            "label": "Programming tests",
            "options": [
              { "id": 3, "label": "Javascript test" },
              { "id": 4, "label": "Ruby test" },
            ]
          }
        ]
      },
      {
        "id": "persona",
        "label": "Persona",
        "placeholder": "Select persona",
        "type": "select",
        "options": [
          { "id": 1, "label": "Senior developer" },
          { "id": 2, "label": "Junior developer" },
        ]
      },
    ],
    "assessment-criteria": [
      {
        "id": "algorithm-test-recursive-24566",
        "label": "Recursive thinking"
      },
      {
        "id": "algorithm-test-sorting-66345",
        "label": "Overall grasp of sorting algorithms"
      }
    ]
  }
}
```

### HTTP Request
`GET ${BASE_URL}/config`

The request is authenticated with the client-specific “provider key” in the Authorization Bearer header.

### Expected response

Attribute            | Type    | Description
---------------------|---------|------------
config               | object  | Top-level object
fields               | array   | List of possible fields (see below)
assessment-criteria  | array   | List of available assessment criteria (optional)

### Field objects

Attribute        | Type    | Description
-----------------|---------|------------
id               | string  | Identifier for this field, will be sent in webhook
label            | string  | Human readable label
placeholder      | string  | Form placeholder
type             | string  | Type of form element (see below)
optgroups        | array   | Can be used to form a select tag with multiple optgroups (see example)
refetch          | boolean | Can be used to conditionally add fields based on previously selected values

### Supported field types

Field objects follow the HTML form standard in regards to types, possible options, labels and placeholders.
For example, __disabled__ may be provided for the __"text"__ type, __step__, __min__ and __max__ may be provided for the __"number"__ type and an __options__ array
with __id__/__label__ may be provided for the __"select"__ type.

All of the supported field types:

- checkbox
- color
- date
- datetime
- datetime-local
- email
- file (see notes below)
- infobox
- error
- hidden
- month
- number
- password
- radio
- range
- reset
- search
- select
- multiselect
- tel
- text
- url
- week

#### File uploads
When using the `file` type, we upload the files to a private folder on S3, and send a signed URL to the file in the webhook.
This URL is valid for 24 hours, so make sure to download the file when the webhook is sent to you.

#### Infobox
Renders a box with the icon of following types: 'info', 'error', 'warning', 'success', 'default'

```json
{
  "type": "infobox",
  "content": "To get information how to activate this integration works please <a href="">CLICK</a>",
  "icon": "info"
}
```

### Assessment Criteria Object

Attribute        | Type    | Description
-----------------|---------|------------
id               | string  | Your unique identifier for this assessment criteria.  Use this identifier when updating the `partner-result` with the score for the assessment criteria
label            | string  | Human readable label

#### Error
You can render a red alert error message with error field

```json
{
  "type":"error",
  "message": "Something wrong has happened",
  "required":"true"
}
```

#### Serialization
Id of the element will be passed in the webhook payload along with the user input value
Please note that we serialize "_" to "-" so "id": "test_assessment" will result in the following webhook-data:

```json
{
  "test-assessment": "123"
}
```


